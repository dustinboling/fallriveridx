fallriver IDX - TODO

**NOTE**
* The client does not stay alive for very long, the nonce becomes invalid.
* Thus, spin up a new client as needed. Do not rely on an initializer.
* Or, we can rescue from the nonce error: '20036: V2.7.0 1186: Nonce is invalid'
* Another option: keep the client alive with an hourly(?) task

**QUERIES**
* Use the following syntax to find things in the database.
* We have to do this because of the uppercase letters in postgres columns.
* Note that arel-style queries work normally, and are more performant.
*== Listing.where('"ListingDate" like ?', "1987%")
* OBSERVATIONS
* query time went down by adding a limit, 20 seems to be the max with o indices (20 =~ 600ms in AR)

#8 - finish loading all properties to database, push to heroku
#9 - make sure there are no admin people in the Agent table
#11 - log api requests
#12 - log logins fail/success
#13 - log ip addresses from which api requests are made
#14 - indexes for database (save for last, learn from postgres documentation: it's good.)
#15 - get all the necessary Property fields into the RABL template
#16 - see if its faster to not extend the show action (RABL)
#19 - test api controller. rigorously.
#20 - move acceptable params constant into properties, move acceptable params function into properties_helper
#21 - drop brokers table
#22 - add streetview link to InfoWindow for maps
#23 - fix search.json public remarks (works local, not on heroku)
#24 - make sure that we are actually getting all historical datas


COMPLETED
#1 - write Property seed task
#2 - write ActiveAgent seed task
#18 - add broker/office to property search
#7 - json api @ fallriveridx.com/api/listings/ ... api/agents/
#10 - better error messages in api/properties/invalid_parameters
#17 - figure out how to add limit in to the api (maybe check for its presence and add it as a first term)

TO TEST
#4 - write Property update task
#5 - write Agent update task

CANCELLED
#2.1 - separate ActiveAgent fields into broker/agent
  - rets database was too inconsistent
#6 - devise authentication with token authenticable module support for json queries
  - using custom solution
